For testing our API and current database design, please download postgres SQL

Step1: Download PostgreSQL
Go to the official site: https://www.postgresql.org/download/
Choose your operating system (Windows, macOS, Linux) and follow the installer instructions.

Step2: Install Components
During the installation process, make sure that you:
use the default port (5432), set a password (you'll use this later), and note down the username (usually postgres).

Step3: Create a Database
Open pgAdmin
Right-click on Databases > Create > Database
Set the name to something like rideshare_db, click save

Step4: Create the main table
after the database is created , click on the buttom and top-left saying query tool
Enter the query code below:
As of now, our Rides table has been implemented user also, using the postgres query below:



CREATE TABLE Rides (
    id                    SERIAL PRIMARY KEY,
    user_id               INT    NOT NULL
                            REFERENCES Users(id)
                            ON DELETE CASCADE,

    ride_time             TIMESTAMP NOT NULL,
    number_of_passengers  INT       NOT NULL,
    starting_location     VARCHAR(255) NOT NULL,
    end_destination       VARCHAR(255) NOT NULL,
    driver_username       VARCHAR(100)  NOT NULL,
    ride_description      TEXT,

    INDEX idx_ride_time (ride_time),
    INDEX idx_passengers (number_of_passengers),
    INDEX idx_starting_location (starting_location),
    INDEX idx_end_destination  (end_destination)
);
// above 11 lines are updated Apr 18th by Weicheng for
// creating a relatioinal table to users








////////////////////

CREATE TABLE Users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Stores ride requests from passengers to join a ride
CREATE TABLE Requests (
    request_id SERIAL PRIMARY KEY,                         
    ride_id INT REFERENCES Rides(id) ON DELETE CASCADE,     -- The ride being requested
    passenger_id INT REFERENCES Users(id),                 
    status VARCHAR(20) DEFAULT 'pending'                   
);

-- Rating table for basic rating functionality
CREATE TABLE Ratings (
    rating_id SERIAL PRIMARY KEY,                           
    ride_id INT REFERENCES Rides(id) ON DELETE CASCADE,    
    reviewer_id INT REFERENCES Users(id),                 
    driver_id INT REFERENCES Users(id),                     -- Driver who receives the rating
    rating INT CHECK (rating BETWEEN 1 AND 5),              -- Score: 1 to 5        
);


Here is the query for our search bar in the app:

SELECT * FROM Rides
WHERE
    starting_location ILIKE '%' || :pickup_location || '%' AND
    end_destination ILIKE '%' || :dropoff_location || '%' AND
    ride_time >= :pickup_datetime AND
    ride_time <= :dropoff_datetime AND
    number_of_passengers >= :passenger_count
ORDER BY ride_time ASC;


Below are the possible query we may use in the app(Message between passanger and driver):
CREATE TABLE Messages (
    id SERIAL PRIMARY KEY,
    ride_id INT REFERENCES Rides(id) ON DELETE CASCADE,
    sender_id INT REFERENCES Users(id) ON DELETE CASCADE,
    receiver_id INT REFERENCES Users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

